{"version":3,"sources":["context/Context.js","data/data.js","styles/styles.js","components/Homepage.js","components/RulesPage.js","components/QuestionPages.js","components/EndPage.js","App.js","index.js"],"names":["QuizContext","createContext","rules","collectionOfQuestions","name","questionsAndAnswer","question","optionA","optionB","optionC","optionD","answer","AppContainer","styled","section","ButtonChoiceGroup","div","Title1","h1","Title2","Caption1","p","Caption2","Button1","button","ListOfRules","li","MarkText","NameInput","input","Indicator","Span1","span","ButtonAnswerGroup","Icon1","i","Homepage","history","useHistory","setQuestionsSet","useContext","ToQuestionPage","e","target","getAttribute","push","style","margin","map","item","index","onClick","RulesPage","playerName","setPlayerName","type","placeholder","onChange","value","alert","QuestionPages","errorMessage","useState","answerChosen","setAnswerChosen","isError","message","error","setError","setScore","score","indexQuestions","setIndexQuestions","questionsSet","selectAnswer","className","length","prevScore","EndPage","App","Provider","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ceaa486.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const QuizContext = createContext();\r\n","export const rules = [\r\n  \"Answer all questions under given times.\",\r\n  \"Be honest. Otherwise, we cannot give the correct mark\",\r\n];\r\n\r\nexport const collectionOfQuestions = [\r\n  {\r\n    name: \"General Knowledge\",\r\n    questionsAndAnswer: [\r\n      {\r\n        question: \"What is the capital of Chile ?\",\r\n        optionA: \"Arica\",\r\n        optionB: \"Santiago\",\r\n        optionC: \"Concepcion\",\r\n        optionD: \"Punta Arenas\",\r\n        answer: \"B\",\r\n      },\r\n      {\r\n        question: \"What is the smallest country in the world?\",\r\n        optionA: \"Singapore\",\r\n        optionB: \"Finland\",\r\n        optionC: \"Timor Leste\",\r\n        optionD: \"Vatican City\",\r\n        answer: \"D\",\r\n      },\r\n      {\r\n        question: \"What is the hottest continent on Earth?\",\r\n        optionA: \"Africa\",\r\n        optionB: \"Asia\",\r\n        optionC: \"Europe\",\r\n        optionD: \"Oceania\",\r\n        answer: \"A\",\r\n      },\r\n      {\r\n        question:\r\n          \"Which is the only vowel not used as the first letter in a US State?\",\r\n        optionA: \"U\",\r\n        optionB: \"I\",\r\n        optionC: \"E\",\r\n        optionD: \"O\",\r\n        answer: \"C\",\r\n      },\r\n      {\r\n        question: \"What is the largest country in the world?\",\r\n        optionA: \"Antartica\",\r\n        optionB: \"China\",\r\n        optionC: \"USA\",\r\n        optionD: \"Russia\",\r\n        answer: \"D\",\r\n      },\r\n      {\r\n        question: \"How many players are there in a rugby league team?\",\r\n        optionA: \"13\",\r\n        optionB: \"11\",\r\n        optionC: \"15\",\r\n        optionD: \"10\",\r\n        answer: \"A\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Classic Riddle\",\r\n    questionsAndAnswer: [\r\n      {\r\n        question: \"What has to be broken before you can use it ?\",\r\n        optionA: \"An egg\",\r\n        optionB: \"A promise\",\r\n        optionC: \"A hole\",\r\n        optionD: \"A sponge\",\r\n        answer: \"A\",\r\n      },\r\n      {\r\n        question:\r\n          \"I’m tall when I’m young, and I’m short when I’m old. What am I ?\",\r\n        optionA: \"A match\",\r\n        optionB: \"An echo\",\r\n        optionC: \"A bank\",\r\n        optionD: \"A candle\",\r\n        answer: \"D\",\r\n      },\r\n      {\r\n        question: \"What has many keys but can’t open a single lock?\",\r\n        optionA: \"A piano\",\r\n        optionB: \"A music box\",\r\n        optionC: \"A secret\",\r\n        optionD: \"A potato\",\r\n        answer: \"A\",\r\n      },\r\n      {\r\n        question: \"What has hands, but can’t clap ?\",\r\n        optionA: \"A key\",\r\n        optionB: \"A piano\",\r\n        optionC: \"A clock\",\r\n        optionD: \"A robot\",\r\n        answer: \"C\",\r\n      },\r\n      {\r\n        question: \"What has many teeth, but can’t bite ?\",\r\n        optionA: \"A baby\",\r\n        optionB: \"A dog\",\r\n        optionC: \"A broom\",\r\n        optionD: \"A comb\",\r\n        answer: \"D\",\r\n      },\r\n      {\r\n        question: \"What has words, but never speaks ?\",\r\n        optionA: \"Book\",\r\n        optionB: \"Dictionary\",\r\n        optionC: \"Student\",\r\n        optionD: \"Mute people\",\r\n        answer: \"A\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n","import styled from \"styled-components\";\r\n\r\nexport const AppContainer = styled.section`\r\n  margin: 60px auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 80%;\r\n  height: auto;\r\n`;\r\n\r\nexport const ButtonChoiceGroup = styled.div`\r\n  margin: 30px 0;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nexport const Title1 = styled.h1`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  font-size: 4rem;\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  line-height: 78px;\r\n  letter-spacing: 0.2em;\r\n  background: -webkit-linear-gradient(90deg, #00f5a0 0%, #00d9f5 100%);\r\n  background-clip: text;\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n`;\r\n\r\nexport const Title2 = styled(Title1)`\r\n  letter-spacing: 0em;\r\n  font-weight: 600;\r\n  font-size: 3rem;\r\n  line-height: 59px;\r\n`;\r\n\r\nexport const Caption1 = styled.p`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 2.25rem;\r\n  line-height: 44px;\r\n  color: #000000;\r\n  margin: 15px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Caption2 = styled(Caption1)`\r\n  font-weight: 500;\r\n  font-size: 2.25rem;\r\n  line-height: 44px;\r\n`;\r\n\r\nexport const Button1 = styled.button`\r\n  font-weight: 600;\r\n  line-height: 29px;\r\n  height: 53px;\r\n  width: 236px;\r\n  border-radius: 15px;\r\n  padding: 1rem;\r\n  font-family: \"Montserrat\", sans-serif;\r\n  font-size: 1.125rem;\r\n  padding: 10px;\r\n  color: black;\r\n  box-shadow: 0 0 6px 0 rgba(157, 96, 212, 0.5);\r\n  border: solid 4px black;\r\n  box-shadow: 2px 1000px 1px #fff inset;\r\n  cursor: pointer;\r\n  margin: 15px;\r\n\r\n  &:hover {\r\n    border: solid 4px transparent;\r\n    background-image: linear-gradient(\r\n        rgba(255, 255, 255, 0),\r\n        rgba(255, 255, 255, 0)\r\n      ),\r\n      linear-gradient(90deg, #00f5a0 0%, #00d9f5 100%);\r\n\r\n    background-origin: border-box;\r\n    background-clip: content-box, border-box;\r\n    box-shadow: 2px 1000px 1px #fff inset;\r\n  }\r\n`;\r\n\r\nexport const ListOfRules = styled.li`\r\n  font-family: \"Montserrat\";\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 1.5rem;\r\n  line-height: 29px;\r\n  margin-bottom: 15px;\r\n  color: #000000;\r\n`;\r\n\r\nexport const MarkText = styled.h1`\r\n  font-family: \"Montserrat\", sans-serif;\r\n  font-size: 9rem;\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  letter-spacing: 0.2em;\r\n  background: -webkit-linear-gradient(90deg, #00f5a0 0%, #00d9f5 100%);\r\n  background-clip: text;\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n`;\r\n\r\nexport const NameInput = styled.input`\r\n  background: #ffffff;\r\n  box-sizing: border-box;\r\n  border-radius: 15px;\r\n  font-family: Montserrat;\r\n  margin: 10px auto;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 29px;\r\n  height: 71px;\r\n  width: 483px;\r\n  color: #000000;\r\n  padding: 5px;\r\n  border: solid 4px transparent;\r\n  background-image: linear-gradient(\r\n      rgba(255, 255, 255, 0),\r\n      rgba(255, 255, 255, 0)\r\n    ),\r\n    linear-gradient(90deg, #00f5a0 0%, #00d9f5 100%);\r\n\r\n  background-origin: border-box;\r\n  background-clip: content-box, border-box;\r\n  box-shadow: 2px 1000px 1px #fff inset;\r\n  outline: none;\r\n`;\r\n\r\nexport const Indicator = styled.p`\r\n  text-align: center;\r\n  margin: 10px 0;\r\n  font-family: Montserrat;\r\n`;\r\n\r\nexport const Span1 = styled.span`\r\n  background: -webkit-linear-gradient(90deg, #00f5a0 0%, #00d9f5 100%);\r\n  background-clip: text;\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport const ButtonAnswerGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Icon1 = styled.i`\r\n  margin-left: 5px;\r\n`;\r\n","import React, { useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { QuizContext } from \"../context/Context\";\r\nimport { collectionOfQuestions } from \"../data/data\";\r\nimport { Title1, Caption1, Button1, AppContainer } from \"../styles/styles\";\r\n\r\nconst Homepage = () => {\r\n  let history = useHistory();\r\n\r\n  const { setQuestionsSet } = useContext(QuizContext);\r\n\r\n  const ToQuestionPage = (e) => {\r\n    setQuestionsSet(e.target.getAttribute(\"data-id\"));\r\n    history.push(\"/quzoos/rulespage\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppContainer>\r\n        <Title1>QUZOOS</Title1>\r\n        <Caption1>Test your knowledge here !</Caption1>\r\n        <div style={{ margin: \"70px\" }}>\r\n          {collectionOfQuestions.map((item, index) => (\r\n            <Button1 onClick={ToQuestionPage} key={index} data-id={index}>\r\n              {item.name}\r\n            </Button1>\r\n          ))}\r\n        </div>\r\n      </AppContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Homepage;\r\n","import React, { useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { QuizContext } from \"../context/Context\";\r\n// import hard coded rules\r\nimport { rules } from \"../data/data\";\r\nimport {\r\n  AppContainer,\r\n  Button1,\r\n  Caption1,\r\n  ListOfRules,\r\n  NameInput,\r\n} from \"../styles/styles\";\r\n\r\nconst RulesPage = () => {\r\n  // accessing state from context API\r\n  const { playerName, setPlayerName } = useContext(QuizContext);\r\n\r\n  // enable history.push()\r\n  let history = useHistory();\r\n\r\n  // get the player's name\r\n  const handleInputChangeName = (e) => {\r\n    setPlayerName(e.target.value);\r\n  };\r\n\r\n  // Bring the player to question page\r\n  const goToQuestion = () => {\r\n    // notify if no name entered\r\n    if (playerName === \"\") {\r\n      alert(\"Please enter your name\");\r\n      return;\r\n    }\r\n    // bring the player to the question page\r\n    history.push(\"/quzoos/questionspage\");\r\n  };\r\n  return (\r\n    <>\r\n      <AppContainer>\r\n        <Caption1>Rules</Caption1>\r\n        <ol style={{ margin: \"60px\" }}>\r\n          {/* List of rules */}\r\n          {rules.map((item, index) => (\r\n            <ListOfRules key={index}>{item}</ListOfRules>\r\n          ))}\r\n        </ol>\r\n        {/* Input for name */}\r\n        <NameInput\r\n          type=\"text\"\r\n          placeholder=\"Enter your name : \"\r\n          onChange={handleInputChangeName}\r\n        />\r\n        <div>\r\n          {/* Button to submit name and go to next page */}\r\n          <Button1 onClick={goToQuestion}>Start</Button1>\r\n        </div>\r\n      </AppContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RulesPage;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { QuizContext } from \"../context/Context\";\r\n// import questions\r\nimport { collectionOfQuestions } from \"../data/data\";\r\nimport {\r\n  Button1,\r\n  Caption1,\r\n  ButtonChoiceGroup,\r\n  Indicator,\r\n  ButtonAnswerGroup,\r\n  Span1,\r\n  Icon1,\r\n} from \"../styles/styles\";\r\n\r\nconst QuestionPages = () => {\r\n  // enable useHistory()\r\n  let history = useHistory();\r\n  // variable to store error message\r\n  const errorMessage = \"Please select an answer\";\r\n  // set answer selected by player\r\n  const [answerChosen, setAnswerChosen] = useState(\"\");\r\n  // control error\r\n  const [error, setError] = useState({ isError: false, message: errorMessage });\r\n  // accessing states from context API\r\n  const { score, setScore, indexQuestions, setIndexQuestions, questionsSet } =\r\n    useContext(QuizContext);\r\n\r\n  // triggered when player click the answer button\r\n  const selectAnswer = (answer) => {\r\n    // set the answer clicked by player\r\n    setAnswerChosen(answer);\r\n  };\r\n\r\n  // triggered when player click the next question button\r\n  const handleNextQuestions = () => {\r\n    // handle if player doesnt select an answer\r\n    if (answerChosen === \"\") {\r\n      setError({ ...error, isError: true, message: errorMessage });\r\n      return;\r\n    }\r\n    // check the answer chosen is correct or not\r\n    if (\r\n      answerChosen ===\r\n      collectionOfQuestions[questionsSet].questionsAndAnswer[indexQuestions]\r\n        .answer\r\n    ) {\r\n      // if correct, increment the mark\r\n      setScore((prevScore) => prevScore + 1);\r\n    }\r\n    // Move to the next questions\r\n    setIndexQuestions(indexQuestions + 1);\r\n    // reset answer chosen\r\n    setAnswerChosen(\"\");\r\n    // reset error to no error\r\n    setError({ ...error, isError: false, message: errorMessage });\r\n  };\r\n\r\n  const handleEndQuiz = () => {\r\n    // handle if player doesnt select an answer\r\n    if (answerChosen === \"\") {\r\n      setError({ ...error, isError: true, message: errorMessage });\r\n      return;\r\n    }\r\n    // check the answer chosen is correct or not\r\n    if (\r\n      answerChosen ===\r\n      collectionOfQuestions[questionsSet].questionsAndAnswer[indexQuestions]\r\n        .answer\r\n    ) {\r\n      // if correct, increment the mark\r\n      setScore((prevScore) => prevScore + 1);\r\n    }\r\n    // reset error to no error\r\n    setError({ ...error, isError: false, message: errorMessage });\r\n    // Move to final page (all questions has been answered)\r\n    history.push(\"/quzoos/endpage\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Display Question */}\r\n      <Caption1>\r\n        {\r\n          collectionOfQuestions[questionsSet].questionsAndAnswer[indexQuestions]\r\n            .question\r\n        }\r\n      </Caption1>\r\n      <ButtonChoiceGroup>\r\n        {/* Display All Answers */}\r\n        <Button1 className=\"\" onClick={() => selectAnswer(\"A\")}>\r\n          {\r\n            collectionOfQuestions[questionsSet].questionsAndAnswer[\r\n              indexQuestions\r\n            ].optionA\r\n          }\r\n        </Button1>\r\n        <Button1 className=\"\" onClick={() => selectAnswer(\"B\")}>\r\n          {\r\n            collectionOfQuestions[questionsSet].questionsAndAnswer[\r\n              indexQuestions\r\n            ].optionB\r\n          }\r\n        </Button1>\r\n        <Button1 className=\"\" onClick={() => selectAnswer(\"C\")}>\r\n          {\r\n            collectionOfQuestions[questionsSet].questionsAndAnswer[\r\n              indexQuestions\r\n            ].optionC\r\n          }\r\n        </Button1>\r\n        <Button1 className=\"\" onClick={() => selectAnswer(\"D\")}>\r\n          {\r\n            collectionOfQuestions[questionsSet].questionsAndAnswer[\r\n              indexQuestions\r\n            ].optionD\r\n          }\r\n        </Button1>\r\n      </ButtonChoiceGroup>\r\n      <ButtonAnswerGroup>\r\n        {/* Tell the player to select an answer */}\r\n        {answerChosen !== \"\" ? (\r\n          <Indicator>\r\n            You choose : <Span1>{answerChosen}</Span1>\r\n          </Indicator>\r\n        ) : (\r\n          <Indicator>{error.message}</Indicator>\r\n        )}\r\n\r\n        {/* Determine if last question.If yes, render endgame button. Otherwise, render next question button */}\r\n        {collectionOfQuestions[questionsSet].questionsAndAnswer.length - 1 ===\r\n        indexQuestions ? (\r\n          <Button1 onClick={handleEndQuiz}>End Quiz</Button1>\r\n        ) : (\r\n          <Button1 onClick={handleNextQuestions}>\r\n            Next\r\n            <Icon1 className=\"fas fa-arrow-right\"></Icon1>\r\n          </Button1>\r\n        )}\r\n      </ButtonAnswerGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionPages;\r\n","import React, { useContext } from \"react\";\r\nimport { QuizContext } from \"../context/Context\";\r\n// import questions\r\nimport { collectionOfQuestions } from \"../data/data\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  AppContainer,\r\n  Title2,\r\n  Caption2,\r\n  MarkText,\r\n  Button1,\r\n  Icon1,\r\n} from \"../styles/styles\";\r\n\r\nconst EndPage = () => {\r\n  // enable useHistory()\r\n  let history = useHistory();\r\n  // accessing states from context API\r\n  const {\r\n    score,\r\n    setScore,\r\n    setIndexQuestions,\r\n    playerName,\r\n    setPlayerName,\r\n    questionsSet,\r\n  } = useContext(QuizContext);\r\n\r\n  // restart the game\r\n  const restartGame = () => {\r\n    // set score back to 0\r\n    setScore(0);\r\n    // display first question back\r\n    setIndexQuestions(0);\r\n    // go back to questions page\r\n    history.push(\"/quzoos/questionspage\");\r\n  };\r\n\r\n  // end the game\r\n  const EndGame = () => {\r\n    // set score back to 0\r\n    setScore(0);\r\n    // display first question back\r\n    setIndexQuestions(0);\r\n    // set player name to empty\r\n    setPlayerName(\"\");\r\n    // go back to homepage\r\n    history.push(\"/quzoos\");\r\n  };\r\n  return (\r\n    <>\r\n      <AppContainer>\r\n        {/*Display player name */}\r\n        <Title2>Congratulations: {playerName && playerName}</Title2>\r\n        <Caption2>Your Marks : </Caption2>\r\n        {/* Display player's mark */}\r\n        <MarkText>\r\n          {score}/\r\n          {collectionOfQuestions[questionsSet].questionsAndAnswer.length}\r\n        </MarkText>\r\n      </AppContainer>\r\n      <div>\r\n        {/* Button to restart the game */}\r\n        <Button1 onClick={restartGame}>\r\n          Try again\r\n          <Icon1 className=\"fas fa-redo\"></Icon1>\r\n        </Button1>\r\n      </div>\r\n      <div>\r\n        {/* Button to end the game */}\r\n        <Button1 onClick={EndGame}>End Game</Button1>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EndPage;\r\n","import \"./App.css\";\nimport Homepage from \"./components/Homepage\";\nimport { AppContainer } from \"./styles/styles\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport RulesPage from \"./components/RulesPage\";\nimport QuestionPages from \"./components/QuestionPages\";\nimport { useState } from \"react\";\nimport { QuizContext } from \"./context/Context\";\nimport EndPage from \"./components/EndPage\";\n\nfunction App() {\n  // setting up state for the context\n  // player score\n  const [score, setScore] = useState(0);\n  // Control current question\n  const [indexQuestions, setIndexQuestions] = useState(0);\n  // collect player name\n  const [playerName, setPlayerName] = useState(\"\");\n  // control which question set the player answered\n  const [questionsSet, setQuestionsSet] = useState(null);\n\n  return (\n    // Providing state to all components\n    <QuizContext.Provider\n      value={{\n        score,\n        setScore,\n        indexQuestions,\n        setIndexQuestions,\n        playerName,\n        setPlayerName,\n        questionsSet,\n        setQuestionsSet,\n      }}\n    >\n      <AppContainer>\n        <Router>\n          <Switch>\n            {/* Homepage route */}\n            <Route path=\"/quzoos\" exact component={Homepage} />\n            {/* RulesPage route */}\n            <Route path=\"/quzoos/rulespage\" exact component={RulesPage} />\n            {/* Question page route */}\n            <Route\n              path=\"/quzoos/questionspage\"\n              exact\n              component={QuestionPages}\n            />\n            {/* Final page (Player's mark display page) route */}\n            <Route path=\"/quzoos/endpage\" exact component={EndPage} />\n          </Switch>\n        </Router>\n      </AppContainer>\n    </QuizContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}